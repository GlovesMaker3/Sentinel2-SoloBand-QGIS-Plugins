# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SentinelOpenDialog
                                 A QGIS plugin
 Sentinel2 SoloBand is an advanced plugin designed to facilitate the convenient and precise retrieval of individual channels from the Sentinel-2 mission.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-08-19
        git sha              : $Format:%H$
        copyright            : (C) 2023 by FishFounder
        email                : buchar123@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from sentinelsat import SentinelAPI
from sentinelsat import SentinelAPI, read_geojson, geojson_to_wkt, make_path_filter
from datetime import date, timedelta
#, read_geojson, geojson_to_wkt, make_path_filter
#, read_geojson, geojson_to_wkt, make_path_filter
# from datetime import date, timedelta
# from collections import OrderedDict
# import boto3
from qgis.core import QgsProject, QgsGeometry, QgsWkbTypes
from shapely.geometry import mapping
from shapely.ops import unary_union
from qgis.utils import iface
from qgis.PyQt.QtCore import QVariant
from qgis.PyQt.QtCore import QVariant
from qgis.core import QgsFeature, QgsGeometry, QgsVectorLayer, QgsWkbTypes
from PyQt5.QtCore import QDate
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QToolButton, QApplication


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'sentinel_open_dialog_base.ui'))


class SentinelOpenDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SentinelOpenDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.q1.setText(r'https://scihub.copernicus.eu/dhus')
        self.q2.textChanged.connect(self.login)
        self.q3.setEchoMode(QtWidgets.QLineEdit.Password)
        self.pb4.clicked.connect(self.handle_pb4_click)  # Użyj nowej metody
        self.pb4_clicked = False  # Flaga dla śledzenia kliknięcia pb4

        #zmienna globalna
        self.api = None





        #wybieraj z listy z mapy
        self.cblista.currentIndexChanged.connect(self.wybieraniewarstwzmapy)
        self.populateLayerComboBox()

        #flaga dla przycisku pobierz
        self.pb5.clicked.connect(self.handle_pb5_click)  # Użyj nowej metody
        self.pb5_clicked = False  # Flaga dla śledzenia kliknięcia pb5



        #self.q7.textChanged.connect(self.download)
        self.q7.setText(r"C:\Users\FBI\Downloads\s2")

        # Inicjalizacja interfejsu użytkownika, dodanie przycisku, itp.


        self.path.clicked.connect(self.choose_directory)

        # Inicjalizacja zmiennej output_dir
        self.output_dir = ""



        #QProgressBar

        # self.progress_layout = QtWidgets.QVBoxLayout()
        # self.bar.setLayout(self.progress_layout)  # Przypisz układ do self.bar


    def choose_directory(self):
        dialog = QFileDialog(self)
        dialog.setFileMode(QFileDialog.Directory)

        selected_dir = dialog.getExistingDirectory(self)


        if selected_dir:
            self.output_dir = selected_dir
            self.q7.setText(self.output_dir)  # Ustawienie ścieżki jako tekst przycisku
            print("Wybrany katalog:", self.output_dir)

    def handle_pb4_click(self):
        self.pb4_clicked = True
        self.login()

    def login(self):
        value1 = self.q1.text()
        value2 = self.q2.text()
        value3 = self.q3.text()

        if value1:
        #if value1 and value2 and value3 and self.pb4_clicked:
            print(f'url: {value1}')
            print(f'Login: {value2}')
            print(f'Password: {value3}')



            #api = SentinelAPI(value2, value3, value1)
            #api = SentinelAPI('GlovesMaker123', 'd63613255D', 'https://scihub.copernicus.eu/dhus')
            self.q4.setText('Zostałeś zalogowany')
            # Tworzenie komunikatu
            # message_box = QtWidgets.QMessageBox()
            # message_box.setWindowTitle('Zalogowano')
            # message_box.setIcon(QtWidgets.QMessageBox.Information)
            # message_box.setText('Zostałeś zalogowany.')
            # message_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
            # message_box.exec_()
        self.api = SentinelAPI('GlovesMaker123', 'd63613255D', 'https://scihub.copernicus.eu/dhus')
        print('Ok')


            ################################# Search and download ########################################

    # LISTA Z WARSTW
    def populateLayerComboBox(self):
        # Clear the combobox
        self.cblista.clear()

        # Get a list of map layers from the QgsProject
        layers = QgsProject.instance().mapLayers().values()

        # Add layer names to the combobox
        for layer in layers:
            self.cblista.addItem(layer.name())

    # def wybieraniewarstwzmapy(self):
    #     selected_layer_name = self.cblista.currentText()  # Get the name of the selected layer
    #     print(f'Wybrana warstwa: {selected_layer_name}')

    def wybieraniewarstwzmapy(self, index):
        selected_layer_name = self.cblista.currentText()  # Get the name of the selected layer
        print(f'Wybrana warstwa: {selected_layer_name}')
    #

    def handle_pb5_click(self):
        self.pb5_clicked = True
        self.download()




    def download_band(self, s3, output_dir):
        n = 0
        for x in s3:
            n += 1
            print('_2_: ' + str(n))
            path_filter = make_path_filter("*{}".format(x))
            print(path_filter)
            self.api.download_all(self.products, directory_path=output_dir, nodefilter=path_filter)

            print('\n')
            print("Download for - *{}".format(x))





    def download(self):



        selected_layer_name = self.cblista.currentText()
        layer = QgsProject.instance().mapLayersByName(selected_layer_name)[0]

        if layer.geometryType() != QgsWkbTypes.PolygonGeometry:
            print('Only in GeoJSON format from map. The selected layer does not contain polygons. Choose a layer with polygons.')
            return

        if layer.featureCount() == 0:
            print('Only in GeoJSON format from map')
            return

        feature = next(layer.getFeatures())
        footprint_wkt = feature.geometry().asWkt()






        # # Definicja przedziału dat
        # # start_date = date.today() - timedelta(days=5)
        start_date = self.da1.date().toPyDate()
        # # end_date = date.today()
        end_date = self.da2.date().toPyDate()
        print('okej')
        # # Wyszukaj produkty Sentinel-2 odpowiadające zdefiniowanym kryteriom
        products_0 = self.api.query(footprint_wkt,
                               date=(start_date, end_date),
                               platformname='Sentinel-2',
                               producttype='S2MSI2A',
                               cloudcoverpercentage=(0, self.cloud.value()))
        #
        # # Wybierz jeden produkt z pobranych
        product_id = list(products_0.keys())
        print(product_id)
        print(f'cloud {self.cloud.value()}')


        z = 0
        for k, v in products_0.items():
            # print(k)
            # print(v)
            print('\n')
            print('\n')
            print('\n')
            print('Teraz bede pobierać: ' + v['title'])
            z += 1
            print('_1_: ' + str(z))
            # print(v['filename'])
            # print(v['filename'].split('_'))
            # print(v['datastripidentifier'].split('_'))
            # print(v['datastripidentifier'].split('_')[-2][1:])

            # print(v['granuleidentifier'].split('_')[-3])

            # print("r'C:\\Users\\FBI\\Downloads\\s2\\{}\\GRANULE\\L2A_{}_{}_{}\\IMG_DATA\\R20m\\{}_{}_{}".format(
            # v['filename'],   v['filename'].split('_')[-2],v['datastripidentifier'].split('_')[-2][1:], v['datastripidentifier'].split('_')[-2][1:],v['filename'].split('_')[-2], v['filename'].split('_')[2],s3[0][1:]))

            self.products = self.api.query(footprint_wkt,
                                 date=(start_date, end_date),
                                 platformname='Sentinel-2',
                                 producttype='S2MSI2A',
                                 cloudcoverpercentage=(0, self.cloud.value()),
                                 filename='{}'.format(v['filename']))

##################### 10 m ##########################

            # if self.AOT_10m.isChecked():
            #
            #     #pobierany kanał spektralny
            #     s3 = ['AOT_10m.jp2']
            #
            #     # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            #     output_dir = self.q7.text()
            #     # output_dir = self.path.menu()
            #
            #     self.download_band(s3, output_dir)
            #
            # if self.B02_10m.isChecked():
            #
            #     #pobierany kanał spektralny
            #     s3 = ['B02_10m.jp2']
            #
            #     # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            #     output_dir = self.q7.text()
            #     # output_dir = self.path.menu()
            #
            #     self.download_band(s3, output_dir)
            #
            # if self.B03_10m.isChecked():
            #
            #     #pobierany kanał spektralny
            #     s3 = ['B03_10m.jp2']
            #
            #     # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            #     output_dir = self.q7.text()
            #     # output_dir = self.path.menu()
            #
            #     self.download_band(s3, output_dir)
            #
            # if self.B04_10m.isChecked():
            #
            #     #pobierany kanał spektralny
            #     s3 = ['B04_10m.jp2']
            #
            #     # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            #     output_dir = self.q7.text()
            #     # output_dir = self.path.menu()
            #
            #     self.download_band(s3, output_dir)
            #
            # if self.B08_10m.isChecked():
            #
            #     #pobierany kanał spektralny
            #     s3 = ['B08_10m.jp2']
            #
            #     # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            #     output_dir = self.q7.text()
            #     # output_dir = self.path.menu()
            #
            #     self.download_band(s3, output_dir)
            #
            # if self.TCI_10m.isChecked():
            #
            #     #pobierany kanał spektralny
            #     s3 = ['TCI_10m.jp2']
            #
            #     # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            #     output_dir = self.q7.text()
            #     # output_dir = self.path.menu()
            #
            #     self.download_band(s3, output_dir)
            #
            #
            # if self.WVP_10m.isChecked():
            #
            #     #pobierany kanał spektralny
            #     s3 = ['WVP_10m.jp2']
            #
            #     # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            #     output_dir = self.q7.text()
            #     # output_dir = self.path.menu()
            #
            #     self.download_band(s3, output_dir)
            #
            # if self.ALL_10m.isChecked():
            #
            #     #pobierany kanał spektralny
            #     s3 = ['AOT_10m.jp2', 'B02_10m.jp2', 'B03_10m.jp2', 'B03_10m.jp2', 'B04_10m.jp2', 'B08_10m.jp2', 'TCI_10m.jp2', 'WVP_10m.jp2']
            #
            #     # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            #     output_dir = self.q7.text()
            #     # output_dir = self.path.menu()
            #
            #     self.download_band(s3, output_dir)
            # Lista dostępnych kanałów spektralnych
            available_bands = ['AOT_10m', 'B02_10m', 'B03_10m', 'B04_10m', 'B08_10m', 'TCI_10m', 'WVP_10m']

            # Pobierana lista zaznaczonych kanałów
            selected_bands = [band for band in available_bands if getattr(self, band).isChecked()]

            # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
            output_dir = self.q7.text()
            # output_dir = self.path.menu()

            # Pobieranie wybranych kanałów spektralnych
            self.download_band(selected_bands, output_dir)

##################### 20 m ##########################



            if self.b4.isChecked() :

                #pobierany kanał spektralny
                s3 = ['B04_20m.jp2']

                # Ścieżka do katalogu, w którym zostaną zapisane pobrane pliki
                output_dir = self.q7.text()
                # output_dir = self.path.menu()

                self.download_band(s3, output_dir)



            if self.b5.isChecked():
                s3 = ['B05_20m.jp2']
                output_dir = self.q7.text()
                # output_dir = self.path.menu()

                self.download_band(s3, output_dir)


            if self.b6.isChecked():
                s3 = ['B06_20m.jp2']
                output_dir = self.q7.text()
                # output_dir = self.path.menu()

                self.download_band(s3, output_dir)


            if self.btci.isChecked():
                s3 = ['TCI_20m.jp2']
                output_dir = self.q7.text()
                # output_dir = self.path.menu()

                self.download_band(s3, output_dir)


            if self.ball_10m.isChecked():
                s3 = ['B04_20m.jp2', 'B05_20m.jp2', 'B06_20m.jp2', 'TCI_20m.jp2']
                output_dir = self.q7.text()
                # output_dir = self.path.menu()

                self.download_band(s3, output_dir)
